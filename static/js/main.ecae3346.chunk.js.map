{"version":3,"sources":["view/Chat/Chat.jsx","view/Notepad/Notepad.jsx","view/Music/Music.jsx","view/Client/Client.jsx","view/App/App.js","state/counter/action_types.js","state/counter/reducers.js","state/shared/store/store.js","serviceWorker.js","index.js"],"names":["Chat","props","useState","chatMsg","setChatMsg","messages","setMessages","useEffect","socket","on","player","socketID","prevMessages","name","id","msg","disconnect","userName","onSubmit","event","preventDefault","target","reset","emit","type","placeholder","onChange","value","map","href","onClick","recipient","Notepad","text","setText","rows","cols","imageP","jukeoff","jukeon","Music","state","play","open","audio","Audio","toggleImage","setState","getImageName","togglePlay","volume","pause","toggleBoth","imageName","this","src","alt","Component","connectionOptions","Client","socketIOClient","setUsername","isLoggedIn","setLoggedIn","errorMsg","setErrorMsg","setTimeout","input","App","loadClient","setLoadClient","className","prevState","reducer","action","types","amount","rootReducer","combineReducers","reducers","logger","createLogger","collapsed","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecae3346.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Chat(props)\r\n{\r\n    const [chatMsg, setChatMsg] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const onSubmit = (event) =>\r\n    {\r\n        event.preventDefault();\r\n        event.target.reset();\r\n        // Emit to send message event\r\n        props.socket.emit(\"send message\", chatMsg, props.userName, props.socket.id);\r\n    };\r\n\r\n    const onChange = (event) =>\r\n    {\r\n        setChatMsg(event.target.value);\r\n    };\r\n\r\n    const onClick = (event, recipient) =>\r\n    {\r\n        event.preventDefault();\r\n        props.socket.emit(\"send private msg\", \"\", props.userName, recipient);\r\n    };\r\n\r\n    useEffect(() =>\r\n    {\r\n        // Listen for response from message sent event\r\n        props.socket.on(\"message sent\", (chatMsg, player, socketID) =>\r\n        {\r\n            setMessages(prevMessages => [...prevMessages, { player: { name: player, id: socketID }, chatMsg }]);\r\n        });\r\n\r\n        props.socket.on(\"private msg sent\", (chatMsg) =>\r\n        {\r\n            setMessages(prevMessages => [...prevMessages, { player: { name: \"CONSOLE\", id: \"0\"}, chatMsg }])\r\n        });\r\n\r\n        props.socket.on(\"player join\", (msg) =>\r\n        {\r\n            setMessages(prevMessages => [...prevMessages, { player: { name: \"CONSOLE\", id: \"0\"}, chatMsg: msg }]);\r\n        });\r\n\r\n        props.socket.on(\"player leave\", (msg) =>\r\n        {\r\n            setMessages(prevMessages => [...prevMessages, { player: { name: \"CONSOLE\", id: \"0\"}, chatMsg: msg }]);\r\n        });\r\n\r\n        // Clean up the effect\r\n        return () => props.socket.disconnect();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            Welcome, <strong>{props.userName}</strong>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder=\"Chat Here\" onChange={onChange} />\r\n            </form>\r\n            Messages:<br/>\r\n            {messages.map(msg => \r\n                <div>\r\n                    {msg.player.name !== props.userName ? \r\n                        <a href={msg.player.name} onClick={event => onClick(event, msg.player)}><strong>{msg.player.name}</strong></a> : \r\n                        <strong>{msg.player.name}</strong>\r\n                    }  \r\n                    <br/>\r\n                    {msg.chatMsg}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Notepad(props)\r\n{\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    const getTextArea = () =>\r\n    {\r\n        props.socket.emit(\"get textarea\");\r\n\r\n        props.socket.on(\"receive textarea\", (text) =>\r\n        {\r\n            setText(text);\r\n        });\r\n    };\r\n\r\n    const onChange = (event) =>\r\n    {\r\n        setText(event.target.value);\r\n        props.socket.emit(\"update textarea\", event.target.value);\r\n    };\r\n\r\n    useEffect(() =>\r\n    {\r\n        getTextArea();\r\n\r\n        props.socket.on(\"textarea updated\", (text) =>\r\n        {\r\n            setText(text);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            Notepad:<br/>\r\n            <form>\r\n                <textarea onChange={onChange} value={text} rows=\"40\" cols=\"100\" placeholder=\"Start typing here, for real-time peer programming\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}","import React, { Component } from \"react\";\n\nconst imageP = {\n    jukeoff: \"/crappyjuke.png\",\n    jukeon: \"/crappyjukeon.png\",\n}\n\nclass Music extends Component {\n    state = {\n        play: false,\n        open: true,\n    }\n\n    audio = new Audio(\"/fontcolorsea.mp3\")\n\n    toggleImage = () => {\n        this.setState(state => ({ open: !state.open}));\n    }\n\n    getImageName = () => this.state.open ? 'jukeoff' : 'jukeon';\n\n    togglePlay = () => {\n        this.setState({play: !this.state.play}, () => {\n            this.audio.volume = 0.1;\n            this.state.play ? this.audio.play() : this.audio.pause();\n        });\n    }\n\n    toggleBoth = () =>{\n        this.toggleImage();\n        this.togglePlay();\n    }\n\n    render() {\n        const imageName = this.getImageName();\n        return (\n            <div>\n                <form>\n                    <img src={imageP[imageName]} onClick={this.toggleBoth} alt='crappyjukebox' />\n                </form>\n            </div>\n        );\n    }\n}\nexport default Music;","import React, { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Chat from \"../Chat/Chat\";\r\nimport Notepad from \"../Notepad/Notepad\";\r\nimport Music from \"../Music/Music\";\r\n\r\nconst ENDPOINT = \"localhost:3001\";\r\nconst connectionOptions =\r\n{\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"infinity\",\r\n    \"timeout\": 10000,\r\n    \"transports\": [\"websocket\"]\r\n};\r\n\r\nexport default function Client()\r\n{\r\n    const socket = socketIOClient(ENDPOINT, connectionOptions);\r\n    const [userName, setUsername] = useState(\"\");\r\n    const [isLoggedIn, setLoggedIn] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    const onSubmit = (event) =>\r\n    {\r\n        event.preventDefault();\r\n        socket.emit(\"set username\", event.target.input.value);\r\n        event.target.reset();\r\n    };\r\n\r\n    useEffect(() =>\r\n    {\r\n        socket.on(\"user set\", (userName) =>\r\n        {\r\n            setUsername(userName);\r\n            setLoggedIn(true);\r\n            socket.emit(\"user set successful\");\r\n        });\r\n\r\n        socket.on(\"user exists\", (errorMsg) =>\r\n        {\r\n            setErrorMsg(errorMsg);\r\n            setLoggedIn(false);\r\n            setTimeout(() => setErrorMsg(\"\"), 2000);\r\n\r\n            socket.emit(\"user set unsuccessful\");\r\n        });\r\n\r\n        // Clean up the effect\r\n        return () => socket.disconnect();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn ? \r\n                <div>\r\n                    <form onSubmit={onSubmit}>\r\n                        Enter a Username:<br/>\r\n                        <input type=\"text\" name=\"input\" placeholder=\"Username\" />\r\n                        <button type=\"submit\">Enter the Chat</button>\r\n                    </form>\r\n                    <br/>\r\n                    {errorMsg}\r\n                </div>\r\n                :\r\n                <div>\r\n                    <Notepad socket={socket} />\r\n                    <Chat socket={socket} userName={userName} />\r\n                    <Music/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport Client from \"../Client/Client\";\r\n\r\nfunction App() \r\n{\r\n    const [loadClient, setLoadClient] = useState(true);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {/* Load or unload the client */}\r\n            <button onClick={() => setLoadClient(prevState => !prevState)}>Stop/Start Client</button>\r\n            <header className=\"App-header\">\r\n                {/* Socket IO Client */}\r\n                {loadClient ? <Client /> : \"Client Offline\"}\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// ACTION TYPES\r\nconst INCREMENT = \"INCREMENT\";\r\nconst DECREMENT = \"DECREMENT\";\r\n\r\nexport default { INCREMENT, DECREMENT }","import types from \"./action_types\";\r\n\r\n// REDUCER\r\nconst reducer = (state = 0, action) =>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case types.INCREMENT: return state + action.amount;\r\n        case types.DECREMENT: return state - action.amount;\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","// Necessities and accessories for constructing our Redux store\r\nimport { combineReducers, applyMiddleware, createStore } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// Individual reducers altogether under an alias\r\nimport * as reducers from '../../reducers.js';\r\n\r\n// Construct our Redux store\r\nconst rootReducer = combineReducers(reducers);\r\nconst logger = createLogger({ collapsed: true });\r\nconst middleware = composeWithDevTools(applyMiddleware(thunkMiddleware, logger));\r\nconst store = createStore(rootReducer, middleware);\r\n\r\n// Export our store by default, which will be provided to and injected within our entire application\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './view/App/App';\r\nimport store from './state/shared/store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}